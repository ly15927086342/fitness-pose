18/18 [==============================] - 10s 484ms/step - total_loss: 0.7898 - cls_loss: 0.5140 - box_loss: 0.0043 - model_loss: 0.7267
creating index...
index created!
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.88s).
Accumulating evaluation results...
DONE (t=0.16s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.321
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.682
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.241
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.093
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.311
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.459
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.342
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.410
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.205
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.405
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.529
Validation loss: [0.789843738079071, 0.5139644145965576, 0.0042539332062006, 0.7266610264778137]
Validation coco metrics: {'AP': 0.32088926, 'AP50': 0.68200237, 'AP75': 0.24123316, 'APs': 0.09314471, 'APm': 0.31099376, 'APl': 0.4592713, 'ARmax1': 0.34231204, 'ARmax10': 0.40657622, 'ARmax100': 0.4100245, 'ARs': 0.20476191, 'ARm': 0.40524226, 'ARl': 0.52916664}

/usr/local/lib/python3.10/dist-packages/keras/src/engine/functional.py:642: UserWarning: Input dict contained keys ['6'] which did not match any model input. They will be ignored by the model.
  inputs = self._flatten_to_reference_inputs(inputs)
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
Epoch 1/10
/usr/local/lib/python3.10/dist-packages/keras/src/backend.py:452: UserWarning: `tf.keras.backend.set_learning_phase` is deprecated and will be removed after 2020-10-11. To update it, simply pass a True/False value to the `training` argument of the `__call__` method of your layer or model.
  warnings.warn(
WARNING:tensorflow:Gradients do not exist for variables ['conv2dbn_block_4/quant_conv2d/kernel:0', 'conv2dbn_block_4/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_4/quant_sync_batch_normalization/beta:0', 'conv2dbn_block_5/quant_conv2d/kernel:0', 'conv2dbn_block_5/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_5/quant_sync_batch_normalization/beta:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?
WARNING:tensorflow:Gradients do not exist for variables ['conv2dbn_block_4/quant_conv2d/kernel:0', 'conv2dbn_block_4/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_4/quant_sync_batch_normalization/beta:0', 'conv2dbn_block_5/quant_conv2d/kernel:0', 'conv2dbn_block_5/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_5/quant_sync_batch_normalization/beta:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?
WARNING:tensorflow:Gradients do not exist for variables ['conv2dbn_block_4/quant_conv2d/kernel:0', 'conv2dbn_block_4/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_4/quant_sync_batch_normalization/beta:0', 'conv2dbn_block_5/quant_conv2d/kernel:0', 'conv2dbn_block_5/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_5/quant_sync_batch_normalization/beta:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?
WARNING:tensorflow:Gradients do not exist for variables ['conv2dbn_block_4/quant_conv2d/kernel:0', 'conv2dbn_block_4/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_4/quant_sync_batch_normalization/beta:0', 'conv2dbn_block_5/quant_conv2d/kernel:0', 'conv2dbn_block_5/quant_sync_batch_normalization/gamma:0', 'conv2dbn_block_5/quant_sync_batch_normalization/beta:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss` argument?
136/136 [==============================] - 328s 2s/step - total_loss: 1.9956 - cls_loss: 1.0449 - box_loss: 0.0190 - model_loss: 1.9956 - val_total_loss: 1.4031 - val_cls_loss: 0.8031 - val_box_loss: 0.0120 - val_model_loss: 1.4031
Epoch 2/10
136/136 [==============================] - 242s 2s/step - total_loss: 1.0829 - cls_loss: 0.6289 - box_loss: 0.0091 - model_loss: 1.0829 - val_total_loss: 1.1668 - val_cls_loss: 0.6922 - val_box_loss: 0.0095 - val_model_loss: 1.1668
Epoch 3/10
136/136 [==============================] - 240s 2s/step - total_loss: 0.9342 - cls_loss: 0.5364 - box_loss: 0.0080 - model_loss: 0.9342 - val_total_loss: 1.1380 - val_cls_loss: 0.6915 - val_box_loss: 0.0089 - val_model_loss: 1.1380
Epoch 4/10
136/136 [==============================] - 240s 2s/step - total_loss: 0.8587 - cls_loss: 0.4986 - box_loss: 0.0072 - model_loss: 0.8587 - val_total_loss: 1.1316 - val_cls_loss: 0.6882 - val_box_loss: 0.0089 - val_model_loss: 1.1316
Epoch 5/10
136/136 [==============================] - 238s 2s/step - total_loss: 0.8520 - cls_loss: 0.4917 - box_loss: 0.0072 - model_loss: 0.8520 - val_total_loss: 1.1270 - val_cls_loss: 0.6899 - val_box_loss: 0.0087 - val_model_loss: 1.1270
Epoch 6/10
136/136 [==============================] - 241s 2s/step - total_loss: 0.8459 - cls_loss: 0.4863 - box_loss: 0.0072 - model_loss: 0.8459 - val_total_loss: 1.1347 - val_cls_loss: 0.6972 - val_box_loss: 0.0087 - val_model_loss: 1.1347
Epoch 7/10
136/136 [==============================] - 245s 2s/step - total_loss: 0.8322 - cls_loss: 0.4899 - box_loss: 0.0068 - model_loss: 0.8322 - val_total_loss: 1.1293 - val_cls_loss: 0.6956 - val_box_loss: 0.0087 - val_model_loss: 1.1293
Epoch 8/10
136/136 [==============================] - 240s 2s/step - total_loss: 0.8324 - cls_loss: 0.4832 - box_loss: 0.0070 - model_loss: 0.8324 - val_total_loss: 1.1395 - val_cls_loss: 0.7015 - val_box_loss: 0.0088 - val_model_loss: 1.1395
Epoch 9/10
136/136 [==============================] - 235s 2s/step - total_loss: 0.8362 - cls_loss: 0.4925 - box_loss: 0.0069 - model_loss: 0.8362 - val_total_loss: 1.1409 - val_cls_loss: 0.7029 - val_box_loss: 0.0088 - val_model_loss: 1.1409
Epoch 10/10
136/136 [==============================] - 234s 2s/step - total_loss: 0.8619 - cls_loss: 0.5023 - box_loss: 0.0072 - model_loss: 0.8619 - val_total_loss: 1.1458 - val_cls_loss: 0.7063 - val_box_loss: 0.0088 - val_model_loss: 1.1458
69/69 [==============================] - 12s 162ms/step - total_loss: 0.9620 - cls_loss: 0.5972 - box_loss: 0.0073 - model_loss: 0.9620
creating index...
index created!
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.46s).
Accumulating evaluation results...
DONE (t=0.10s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.086
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.210
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.057
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.007
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.083
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.138
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.210
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.239
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.089
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.228
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.350
QAT validation loss: [0.9620281457901001, 0.5971814393997192, 0.007296934723854065, 0.9620281457901001]
QAT validation coco metrics: {'AP': 0.08610906, 'AP50': 0.20961374, 'AP75': 0.057242848, 'APs': 0.007346851, 'APm': 0.08299845, 'APl': 0.14498974, 'ARmax1': 0.1378274, 'ARmax10': 0.20977953, 'ARmax100': 0.23939137, 'ARs': 0.08928572, 'ARm': 0.22819549, 'ARl': 0.35034722}